.. _plot:

########
Plotting
########

This page describes in depth the plotting capabilities of GCPy,
including possible argument values for every plotting function.

.. _plot-csl-and-czm:

===========================================
compare_single_level and compare_zonal_mean
===========================================

These routines listed below generate six-panel plots comparing
variables between two datasets:

+-----------------------------+------------------------------------+
| Plotting routine            | Located in GCPy module             |
+=============================+====================================+
| ``compare_single_level()``  | ``gcpy.plot.compare_single_level`` |
+-----------------------------+------------------------------------+
| ``compare_zonal_mean()``    | ``gcpy.plot.compare_zonal_mean``   |
+-----------------------------+------------------------------------+

They share significant structural overlap both in output appearance
and code implementation. This section gives an overview of the
components of the plots generated by these functions, their shared
arguments, and features unique to each function.

You can import these routines into your code with these statements:

.. code-block:: python

   from gcpy.plot.compare_single_level import compare_single_level
   from gcpy.plot.compare_zonal_mean import compare_zonal_mean

.. _plot-csl-and-czm-shared:

Shared structure
----------------

Both :code:`compare_single_level()` and :code:`compare_zonal_mean()`
generate a six panel plot for each variable passed. These plots can
either be saved to PDFs or generated sequentially for visualization in
the Matplotlib GUI using :code:`matplotlib.pyplot.show()`.
Each plot uses data passed from a reference (:literal:`Ref`) dataset
and a development (:literal:`Dev`) dataset.

Each panel has a title describing the type of panel, a colorbar for
the values plotted in that panel, and the units of the data plotted in
that panel. The upper two panels of each plot show actual values from
the :literal:`Ref` (left) and :literal:`Dev` (right) datasets for a
given variable. The middle two panels show the difference
(:literal:`Dev - Ref`) between the values in the :literal:`Dev`
dataset and the values in the :literal:`Ref` dataset. The left middle
panel uses a full dynamic color map, while the right middle panel caps
the color map at the 5th and 95th percentiles.  The bottom two panels
show the ratio (:literal:`Dev/Ref`) between the values in the Dev
dataset and the values in the Ref Dataset. The left bottom panel uses
a full dynamic color map, while the right bottom panel caps the color
map at 0.5 and 2.0.

Both :code:`compare_single_level()` and :code:`compare_zonal_mean()`
have four positional (required) arguments.

Arguments:
~~~~~~~~~~

.. option:: refdata : xarray.Dataset

   Dataset used as reference in comparison

.. option:: refstr : str OR list of str

   String description for reference data to be used in plots OR list
   containing [ref1str, ref2str] for diff-of-diffs plots

.. option:: devdata : xarray.Dataset

   Dataset used as development in comparison

.. option:: devstr : str OR list of str

   String description for development data to be used in plots
   OR list containing [dev1str, dev2str] for diff-of-diffs plots

:option:`refstr` and :option:`devstr`  title the top two panels of
each six panel plot.

A basic script that calls :code:`compare_zonal_mean()` or
:code:`compare_single_level()` looks like:

.. code-block:: python

   #!/usr/bin/env python

   import xarray as xr
   import matplotlib.pyplot as plt
   from gcpy.plot.compare_single_level import compare_single_level
   from gcpy.plot.compare_zonal_mean import compare_zonal_mean

   file1 = '/path/to/ref'
   file2 = '/path/to/dev'
   ds1 = xr.open_dataset(file1)
   ds2 = xr.open_dataset(file2)
   compare_zonal_mean(ds1, 'Ref run', ds2, 'Dev run')
   plt.show()
   compare_single_level(ds1, 'Ref run', ds2, 'Dev run')
   plt.show()

:code:`compare_single_level()` and :code:`compare_zonal_mean()` also
share many keyword arguments. Some of these arguments are plotting
options that  change the format of the plots, e.g. choosing to convert
units to ug/m\ :sup:`3`, which are automatically handled if you do not
specify a value for that argument.

Other arguments are necessary to achieve a correct plot depending on
the format of :literal:`refdata` and :literal:`devdata` and require
you to know certain traits of your input data. For example, you must
specify if one of the datasets should be flipped vertically if Z
coordinates in that dataset do not denote decreasing pressure as Z
index increases, otherwise the vertical coordinates between your two
datasets may be misaligned and result in an undesired plotting
outcome.

The :literal:`n_job` argument governs the parallel plotting settings
of :code:`compare_single_level()` and :code:`compare_zonal_mean()` .
GCPy uses the JobLib library to create plots in parallel. Due to
limitations with matplotlib, this parallelization creates plots
(pages) in parallel rather than individual panels on a single
page. Parallel plot creation is not enabled when you do not save to a
PDF. The default value of :literal:`n_job=-1` allows the function call
to automatically scale up to, at most, the number of cores available
on your system.

.. note::

   On systems with higher (12+) core counts, the maximum number of
   cores is not typically reached because of the process handling
   mechanics of JobLib. However, on lower-end systems with lower core
   counts or less available memory, it is advantageous to use
   :literal:`n_job` to limit the max number of processes.

   Due to how Python handles memory management on Linux systems, using
   more cores may result in memory not returned to the system after
   the plots are created.  Requesting fewer cores with
   :literal:`n_job` may help to avoid this situation.

Shared keyword arguments:
~~~~~~~~~~~~~~~~~~~~~~~~~

.. option:: varlist : list of str

   List of xarray dataset variable names to make plots for

   Default value: None (will compare all common variables)

.. option:: itime : int

   Dataset time dimension index using 0-based system. Can only plot
   values from one time index in a single function call.

   Default value: 0

.. option:: refmet : xarray.Dataset

   Dataset containing ref meteorology. Needed for area-based
   normalizations / ug/m3 unit conversions.

   Default value: None

.. option:: devmet : xarray.Dataset

   Dataset containing dev meteorology. Needed for area-based
   normalizations and/or ug/m3 unit conversions.

   Default value: None

.. option:: weightsdir : str

   Directory path for storing regridding weight files generated by
   xESMF.

   Default value: None (will create/store weights in current directory)

.. option:: pdfname : str

   File path to save plots as PDF.

   Default value: Empty string (will not create PDF)

.. option:: cmpres : str

   String description of grid resolution at which to compare
   datasets. The possible formats are 'int' (e.g. '48' for c48) for
   a cubed-sphere resolution  or 'latxlon' (e.g. '4x5') for a
   lat/lon resolution.

   Default value: None (will compare at highest resolution of Ref
   and Dev)

.. option:: match_cbar : bool

   Set this flag to True to use same the colorbar bounds for both
   Ref and Dev plots. This only applies to the top two panels of
   each plot.

   Default value: True

.. option:: normalize_by_area : bool

   Set this flag to True to to normalize raw data in both Ref and
   Dev datasets by grid area. Either input ref and dev datasets
   must include AREA variable in m2 if normalizing by area, or
   refmet and devmet datasets must include Met_AREAM2 variable.

   Default value: False

.. option:: enforce_units : bool

   Set this flag to True force an error if the variables in the Ref
   and Dev datasets have different units.

   Default value: True

.. option:: convert_to_ugm3 : bool

   Whether to convert data units to ug/m3 for plotting. refmet and
   devmet cannot be None if converting to ug/m3.

   Default value: False

.. option:: flip_ref : bool

   Set this flag to True to flip the vertical dimension of 3D
   variables in the Ref dataset.

   Default value: False

.. option:: flip_dev : bool

   Set this flag to True to flip the vertical dimension of 3D
   variables in the Dev dataset.

   Default value: False

.. option:: use_cmap_RdBu : bool

   Set this flag to True to use a blue-white-red colormap for
   plotting raw ref and dev data (the top two panels).

   Default value: False

.. option:: verbose : bool

   Set this flag to True to enable informative printout.

   Default value: False

.. option:: log_color_scale : bool

   Set this flag to True to enable plotting data (only the top two
   panels, not diffs) on a log color scale.

   Default value: False

.. option:: extra_title_txt : str

   Specifies extra text (e.g. a date string such as "Jan2016")
   for the top-of-plot title.

   Default value: None

.. option:: n_job : int

   Defines the number of simultaneous workers for parallel
   plotting. Only applicable when saving to PDF.
   Set to 1 to disable parallel plotting. Value of -1 allows the
   application to decide.

   Default value: -1

.. option:: sigdiff_list : list of str

   Returns a list of all quantities having significant
   differences (where \|max(fractional difference)\| > 0.1).

   Default value: []

.. option:: second_ref : xarray.Dataset

   A dataset of the same model type / grid as refdata, to be used
   in diff-of-diffs plotting.

   Default value: None

.. option:: second_dev : xarray.Dataset

   A dataset of the same model type / grid as devdata, to be used
   in diff-of-diffs plotting.

   Default value: None

.. option:: spcdb_dir : str

   Directory containing species_database.yml file. This file is
   used for unit conversions to ug/m3.  GEOS-Chem run directories
   include a copy of this file which may be more up-to-date than
   the version included with GCPy.

   Default value: Path of GCPy code repository

.. option:: sg_ref_path : str

   Path to NetCDF file containing stretched-grid info (in
   attributes) for the ref dataset.

   Default value: '' (will not be read in)

.. option:: sg_dev_path : str

   Path to NetCDF file containing stretched-grid info (in
   attributes) for the dev dataset.

   Default value: '' (will not be read in)

compare_single_level
--------------------

.. code-block:: python

   def compare_single_level(
           refdata,
           refstr,
           devdata,
           devstr,
           varlist=None,
           ilev=0,
           itime=0,
           refmet=None,
           devmet=None,
           weightsdir='.',
           pdfname="",
           cmpres=None,
           match_cbar=True,
           normalize_by_area=False,
           enforce_units=True,
           convert_to_ugm3=False,
           flip_ref=False,
           flip_dev=False,
           use_cmap_RdBu=False,
           verbose=False,
           log_color_scale=False,
           extra_title_txt=None,
           extent=None,
           n_job=-1,
           sigdiff_list=None,
           second_ref=None,
           second_dev=None,
           spcdb_dir=os.path.dirname(__file__),
           sg_ref_path='',
           sg_dev_path='',
           ll_plot_func='imshow',
           **extra_plot_args
   ):

Routine :code:`compare_single_level()` features several keyword
arguments that are not relevant to :code:`compare_zonal_mean()`,
including specifying which level to plot, the lat/lon extent of the
plots, and which underlying functionality from the
:code:`matplotlib.pylot` and :code:`cartopy` python packages.

Function-specific keyword arguments:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. option:: ilev : int

   Dataset level dimension index using 0-based system

   Default value: 0

.. option:: extent : list of float

   Defines the extent of the region to be plotted in form
   [minlon, maxlon, minlat, maxlat]. Default value plots extent of input grids.

.. option:: ll_plot_func : str

   Function to use for lat/lon single level plotting with possible
   values :literal:`imshow` and :literal:`pcolormesh`. imshow is much
   faster but is slightly displaced when plotting from dateline to
   dateline and/or pole to pole.

.. option:: **extra_plot_args

   Any extra keyword arguments are passed through the plotting
   functions to be used in calls to :code:`pcolormesh()` (CS) or
   :code:`imshow()` (Lat/Lon).

compare_zonal_mean
------------------

.. code-block:: python

   def compare_zonal_mean(
           refdata,
           refstr,
           devdata,
           devstr,
           varlist=None,
           itime=0,
           refmet=None,
           devmet=None,
           weightsdir='.',
           pdfname="",
           cmpres=None,
           match_cbar=True,
           pres_range=None,
           normalize_by_area=False,
           enforce_units=True,
           convert_to_ugm3=False,
           flip_ref=False,
           flip_dev=False,
           use_cmap_RdBu=False,
           verbose=False,
           log_color_scale=False,
           log_yaxis=False,
           extra_title_txt=None,
           n_job=-1,
           sigdiff_list=None,
           second_ref=None,
           second_dev=None,
           spcdb_dir=os.path.dirname(__file__),
           sg_ref_path='',
           sg_dev_path='',
           ref_vert_params=None,
           dev_vert_params=None,
           **extra_plot_args
   ):


Routine :code:`compare_zonal_mean()` features several keyword
arguments that are not relevant to :code:`compare_single_level()`,
including specifying the pressure range to plot (defaulting to the
complete atmosphere), whether the y-axis of the plots (pressure)
should be in log format, and hybrid vertical grid parameters to pass
if one or more of Ref and Dev do not use the typical 72-level or
47-level grids.

Function-specific keyword arguments:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. option:: pres_range : list of ints

   Pressure range of levels to plot [hPa]. The vertical axis will
   span the outer pressure edges of levels that contain pres_range
   endpoints.  If not specified, this will be set internally to [0,
   2000].

.. option:: log_yaxis : bool

   Set this flag to True if you wish to create zonal mean
   plots with a log-pressure Y-axis.

.. option:: ref_vert_params : list of list-like types

   Hybrid grid parameter A in hPa and B (unitless). Needed if ref
   grid is not 47 or 72 levels.

.. option:: dev_vert_params : list of list-like types

   Hybrid grid parameter A in hPa and B (unitless). Needed if dev
   grid is not 47 or 72 levels.

.. option:: **extra_plot_args

   Any extra keyword arguments are passed through the plotting
   functions to be used in calls to :code:`pcolormesh()`.

============
single_panel
============

.. code-block:: python

   def single_panel(
           plot_vals,
           ax=None,
           plot_type="single_level",
           grid=None,
           gridtype="",
           title="fill",
           comap=WhGrYlRd,
           norm=None,
           unit="",
           extent=None,
           masked_data=None,
           use_cmap_RdBu=False,
           log_color_scale=False,
           add_cb=True,
           pres_range=None,
           pedge=np.full((1, 1), -1),
           pedge_ind=np.full((1, 1), -1),
           log_yaxis=False,
           xtick_positions=None,
           xticklabels=None,
           proj=ccrs.PlateCarree(),
           sg_path='',
           ll_plot_func="imshow",
           vert_params=None,
           pdfname="",
           weightsdir='.',
           vmin=None,
           vmax=None,
           return_list_of_plots=False,
           **extra_plot_args
   ):

Routine :code:`single_panel()` (contained in GCPy module
:code:`gcpy.plot.single_panel`) is used to create plots containing
only one panel of GEOS-Chem data.  This function is used within
:code:`compare_single_level()` and :code:`compare_zonal_mean()` to
generate each panel plot. It can also be called directly on its
own to quickly plot GEOS-Chem data in zonal mean or single level format.

.. code-block:: python

   #!/usr/bin/env python

   import xarray as xr
   import matplotlib.pyplot as plt
   from gcpy.plot.single_panel import single_panel

   ds = xr.open_dataset('GEOSChem.SpeciesConc.20160701_0000z.nc4')
   #get surface ozone
   plot_data = ds['SpeciesConcVV_O3'].isel(lev=0)

   single_panel(plot_data)
   plt.show()

Currently :code:`single_panel()` expects data with a 1-length ( or
non-existent) time dimension, as well as a 1-length or non-existent Z
dimension for single level plotting, so you'll need to do some
pre-processing of your input data as shown in the above code snippet.

:code:`single_panel()` contains a few amenities to help with plotting
GEOS-Chem data, including automatic grid detection for lat/lon or
standard cubed-sphere xarray :code:`DataArray`-s. You can also pass NumPy
arrays to plot, though you'll need to manually pass grid info in this
case.

Arguments:
----------

In addition to the specific arguments listed below, any other keyword
arguments will be forwarded to :code:`matplotlib.pyplot.imshow()` /
:code:`matplotlib.pyplot.pcolormesh()`.

.. option:: plot_vals : xarray.DataArray or numpy array

   Single data variable to plot

.. option:: ax : matplotlib axes

   Axes object to plot information

.. option:: plot_type : str

   Either :literal:`single_level` or :literal:`zonal_mean`

.. option:: grid : dict

   Dictionary mapping plot_vals to plottable coordinates

.. option:: gridtype : str

   :literal:`ll` for lat/lon, :literal:`cs` for cubed-sphere, or
   :literal:`""` to automatically determine from the grid.

.. option:: title : str

   Specifies the title to place at the top of the plot.  If set to
   :literal:`fill`, then the name attribute of the :code:`plot_vals`
   variable will be used as the title.

.. option:: comap : matplotlib.colors.Colormap

   Colormap for plotting data values

   Default value: WhGrYlRd

.. option:: norm : list

   List with range [0..1] normalizing color range for matplotlib methods

   Default value: [] (will determine from plot_vals)

.. option:: unit : str

   Units of plotted data

   Default value: "" (will use units attribute of plot_vals if available)

.. option:: extent : tuple (minlon, maxlon, minlat, maxlat)

   Describes minimum and maximum latitude and longitude of input data

   Default value: (None, None, None, None) (Will use full extent
   of plot_vals if plot is single level.

.. option:: masked_data : numpy array

   Masked area for avoiding near-dateline cubed-sphere plotting issues

   Default value: None (will attempt to determine from plot_vals)

.. option:: use_cmap_RdBu : bool

   Set this flag to True to use a blue-white-red colormap

   Default value: False

.. option:: log_color_scale : bool

   Set this flag to True to use a log-scale colormap

   Default value: False

.. option:: add_cb : bool

   Set this flag to True to add a colorbar to the plot

   Default value: True

.. option:: pres_range : list of int

   Range from minimum to maximum pressure for zonal mean plotting

   Default value: [0, 2000] (will plot entire atmosphere)

.. option:: pedge : numpy array

   Edge pressures of vertical grid cells in plot_vals for zonal mean plotting

   Default value: np.full((1, 1), -1) (will determine automatically)

.. option:: pedge_ind : numpy array

   Index of edge pressure values within pressure range in
   plot_vals for zonal mean plotting

   Default value: np.full((1, 1), -1) (will determine automatically)

.. option:: log_yaxis : bool

   Set this flag to True to enable log scaling of pressure in
   zonal mean plots

   Default value: False

.. option:: xtick_positions : list of float

   Locations of lat/lon or lon ticks on plot

   Default value: [] (will place automatically for zonal mean plots)

.. option:: xticklabels : list of str

   Labels for lat/lon ticks

   Default value: [] (will determine automatically from xtick_positions)

.. option:: sg_path : str

   Path to NetCDF file containing stretched-grid info (in
   attributes) for plot_vals

   Default value: '' (will not be read in)

.. option:: ll_plot_func : str

   Function to use for lat/lon single level plotting with
   possible values 'imshow' and 'pcolormesh'.
   imshow is much faster but is slightly displaced when plotting
   from dateline to dateline and/or pole to pole.

   Default value: 'imshow'

.. option:: vert_params : list(AP, BP) of list-like types

   Hybrid grid parameter A in hPa and B (unitless). Needed if
   grid is not 47 or 72 levels.

   Default value: [[], []]

.. option:: pdfname : str

   File path to save plots as PDF

   Default value: "" (will not create PDF)

.. option:: extra_plot_args : various

   Any extra keyword arguments are passed to calls to
   pcolormesh() (CS) or imshow() (Lat/Lon).

Function-specific return value:
-------------------------------

:code:`single_panel()` returns the following object:

.. option:: plot : matplotlib plot

   Plot object created from input
