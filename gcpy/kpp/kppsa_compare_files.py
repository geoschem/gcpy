#!/usr/bin/env python3
"""
Compares files generated by the KPP-Standalone Box Model Interface.
"""

# Imports
from os.path import expanduser, join
import argparse
from gcpy.util import verify_variable_type
from gcpy.kpp.kppsa_utils import \
    kppsa_read_one_csv_file


def kppsa_compare_files(
        ref_file,
        ref_label,
        dev_file,
        dev_label,
        filename="",
):
    """
    Creates vertical profile plots of a given species
    from KPP-Standalone box model output.

    Args
    ref_file  : list : KPP-Standalone log files for "Ref" version
    ref_label : str  : Label for the "Ref" version
    dev_file  : list : KPP-Standalone log files for "Dev" version
    dev_label : str  : Label for the "Dev" version
    file_name : str  : Name of the output PDF file
    """
    verify_variable_type(ref_file, str)
    verify_variable_type(ref_label, str)
    verify_variable_type(dev_file, str)
    verify_variable_type(dev_label, str)
    verify_variable_type(filename, str)

    # Read data
    ref = kppsa_read_one_csv_file(ref_file, kppsa_input=True)
    dev = kppsa_read_one_csv_file(dev_file, kppsa_input=True)

    # Error check
    if len(ref) != len(dev):
        raise ValueError("Ref and Dev mechanisms are not equivalent!")

    # Crop data
    ref = ref[["Name", "Value"]].set_index("Name")
    dev = dev[["Name", "Value"]].set_index("Name")

    # Take absolute & percent differences
    diff = dev - ref
    pctdiff = (diff / ref) * 100.0

    # Extract values to numpy arrays
    name = ref.index
    ref = ref["Value"].values
    dev = dev["Value"].values
    diff = diff["Value"].values
    pctdiff = pctdiff["Value"].values

    # Print values
    for i in range(len(name)):
        str0 = f"{name[i]}".ljust(10)
        str1 = f"{ref[i]:21.15e}".rjust(22)
        str2 = f"{dev[i]:21.15e}".rjust(22)
        str3 = f"{diff[i]:21.15e}".rjust(22)
        str4 = f"{pctdiff[i]:11.4f}".rjust(11)
        print(f"{str0}  {str1}  {str2}  {str3}  {str4}")


def main():
    """
    Parses arguments from the command line and calls
    kppsa_plot_species_at_sites.

    Command-line arguments
    --refdir   : Folder with KPP-Standalone output from Ref model
    --reflabel : Plot label for the Ref model
    --devdir   : Folder with KPP-Standalone output from Dev model
    --devlabel : Plot label for the Dev model
    --pattern  : Look for filenames matching this pattern
    --species  : Species to plot
    --pdfname  : Name of the PDF file to be created
    """

    # Hardwire code for testing
    root = expanduser("~/NT/kpptests")
    ref_file = join(
        root,
        "rosenbrock/test_ros/OutputDir",
        "ErrorBox1_L2_20190701_0020.txt",
    )
    dev_file = join(
        root,
        "beuler/test_beuler/OutputDir",
        "ErrorBox1_L2_20190701_0020.txt",
    )

    print(ref_file)
    print(dev_file)

    kppsa_compare_files(
        ref_file,
        "rosenbrock",
        dev_file,
        "beuler",
        "beuler_vs_rosenbrock.log"
    )


#    # Tell the parser which arguments to look for
#    parser = argparse.ArgumentParser(
#        description="Single-panel plotting example program"
#    )
#    parser.add_argument(
#        "--refdir",
#        metavar="REFDIR",
#        type=str,
#        required=True,
#        help="Directory w/ KPP-Standalone log files (Ref version)"
#    )
#    parser.add_argument(
#        "--reflabel",
#        metavar="REFLABEL",
#        type=str,
#        required=False,
#        help="Descriptive label for the Ref data",
#        default="Ref"
#    )
#    parser.add_argument(
#        "--devdir",
#        metavar="DEVDIR",
#        type=str,
#        required=True,
#        help="Directory w/ KPP-Standalone log files (Dev version)"
#    )
#    parser.add_argument(
#        "--devlabel",
#        metavar="DEVLABEL",
#        type=str,
#        required=False,
#        help="Descriptive label for the Ref data",
#        default="Dev"
#    )
#    parser.add_argument(
#        "--pattern",
#        metavar="PATTERN",
#        type=str,
#        required=False,
#        help="Search for file names matching this pattern",
#    )
#    parser.add_argument(
#        "--species",
#        metavar="SPECIES",
#        type=str,
#        required=True,
#        help="Species to plot"
#    )
#    parser.add_argument(
#        "--pdfname",
#        metavar="PDF-FILE-NAME",
#        type=str,
#        required=False,
#        help="Name of the PDF file to be created",
#        default="kppsa_output.pdf"
#    )
#
#    # Parse command-line arguments
#    args = parser.parse_args()
#
#    # Get a list of KPP-Standalone files matching the criteria (Ref)
#    ref_file_list = kppsa_get_file_list(
#        args.refdir,
#        args.pattern,
#    )
#    if len(ref_file_list) == 0:
#        msg = "Could not find any files matching {pattern} for Ref!"
#        raise ValueError(msg)
#
#    dev_file_list = kppsa_get_file_list(
#        args.devdir,
#        args.pattern,
#    )
#    if len(ref_file_list) == 0:
#        msg = "Could not find any files matching {pattern} for Dev!"
#        raise ValueError(msg)
#
#    # Plot data
#    kppsa_plot_species_at_sites(
#        ref_file_list,
#        args.reflabel,
#        dev_file_list,
#        args.devlabel,
#        args.species,
#        args.pdfname,
#    )




if __name__ == '__main__':
    main()
